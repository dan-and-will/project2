#!/usr/bin/python -u
# The -u makes output unbuffered, so it will show up immediately

#Project 2
#Dan Russotto and Will DeRivera
#Team dan_and_will

import json
import select
import socket
import sys

from datetime import datetime, timedelta

from bpdu import Bpdu
from forwarding_table import ForwardingTable

def pad(name):
    """pads the name with null bytes at the end
    """
    result = '\0' + name
    while len(result) < 108:
        result += '\0'
    return result

BPDU_SEND_INTERVAL = timedelta(seconds=0.5)

class Bridge:

    def __init__(self, bid, lans):
        """sets up bridge with command line params and default values
        """
        self.ftable = ForwardingTable()
        self.id = bid
        self.ports = {}
        self.closed_ports = set()
        self.root_pid = None
        self.bpdu = Bpdu(bid, 0, bid)
        self.best_bpdu = self.bpdu
        self.last_bpdu_time = datetime.utcfromtimestamp(0)
        # creates sockets and connects to them
        for lan in lans:
            s = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
            s.connect(pad(lan))
            self.ports[s.fileno()] = s
        print "Bridge {bid} starting up".format(bid=bid)

    def get_bpdu(self):
        """will return current BPDU
        Handles BPDU timeouts
        """
        if self.bpdu.is_timedout():
            print 'BPDU timeout'
            if self.id != self.bpdu.root:
                self.closed_ports.clear()
            self.bpdu = Bpdu(self.id, 0, self.id)
            self.best_bpdu = self.bpdu
            self.ftable.flush()
        return self.bpdu

    def disable_port(self, pid):
        """disables port
        """
        if pid != self.root_pid:
            print 'Disabled port: {id}/{pid}'.format(id=self.id, pid=pid)
            self.ftable.flush()
            self.closed_ports.add(pid)

    def print_designated_port(self, pid):
        """alerts user of designated ports
        """
        pass # print 'Designated port: {bid}/{pid}'.format(bid=self.id, pid=pid)

    def get_open_ports(self, exclude_pid=None):
        """returns all enabled ports
        exclude_pid is optional and is used to exclude the port that recieved the message
        """
        return [self.ports[pid] for pid in self.ports if pid not in self.closed_ports and pid != exclude_pid]

    def use_bpdu(self, bpdu, pid):
        """configures bridge based on better BPDU
        """
        print 'New root: {id}/{root}, cost: {c}'.format(id=self.id, root=bpdu.root, c=bpdu.cost+1)
        print 'Root port: {id}/{port_id}'.format(id=self.id, port_id=pid)
        self.root_pid = pid
        self.best_bpdu = bpdu
        self.bpdu = Bpdu(bpdu.root, bpdu.cost + 1, self.id)
        self.send_bpdu(send_now=True)
        self.closed_ports.clear()
        self.ftable.flush()

    def process_bpdu(self, packet, pid):
        """compares incoming BPDU messages to the current bridge configuration
        updates the bridge if necessary
        """
        if packet['source'] == self.id:
            # happens when a bridge has 2+ ports on a LAN
            if packet['message']['id'] < pid:
                # Close all but one port on that LAN
                self.disable_port(pid)
            else:
                self.print_designated_port(pid)
            return
        other_bpdu = Bpdu(packet['message']['root'],
                          packet['message']['cost'],
                          packet['source']
                          )
        self_bpdu = self.get_bpdu()
        if self.best_bpdu == other_bpdu:
            # prevents flipping between 2 ports talking to the same next hop bridge
            self.disable_port(pid)
        else:
            self.print_designated_port(pid)
        if self.best_bpdu < other_bpdu:
            # current BPDU is better
            if self_bpdu.root == other_bpdu.root:
                # part of same tree
                if self_bpdu.cost == other_bpdu.cost:
                    if self.id > other_bpdu.bid:
                        # currently have same cost (sibling) and better bid
                        self.disable_port(pid)
                    else:
                        self.print_designated_port(pid)
                elif self.best_bpdu.cost == other_bpdu.cost:
                    # close port talking to parent with worse id than current next hop
                    self.disable_port(pid)
                else:
                    self.print_designated_port(pid)
        else:
            if self.best_bpdu == other_bpdu:
                self.bpdu.reset_timeout()
            else:
                self.use_bpdu(other_bpdu, pid)
                self.send_bpdu(send_now=True)

    def forward_message(self, msg, recv_pid):
        """handles sending message to destination
        """
        if recv_pid in self.closed_ports:
            return
        print 'Received message {id} on port {pid} from {source} to {dest}'.format(id=msg['message']['id'],
                                                                                   pid=recv_pid,
                                                                                   source=msg['source'],
                                                                                   dest=msg['dest']
                                                                                   )
        dest_pid = self.ftable.read_row(msg['dest'])
        if dest_pid ==  recv_pid:
            print 'Not forwarding message {id}'.format(id=msg['message']['id'])
            return
        self.ftable.write_row(msg['source'], recv_pid)
        if dest_pid < 0:
            print 'Broadcasting message {id} to all ports'.format(id=msg['message']['id'])
            ports = self.get_open_ports(exclude_pid=recv_pid)
        else:
            print 'Forwarding message {id} to port {pid}'.format(id=msg['message']['id'],
                                                                 pid=dest_pid
                                                                 )
            ports = [self.ports[dest_pid]]
        msg = json.dumps(msg)
        for s in ports:
            s.send(msg)

    def process_message(self, data, pid):
        """records new hosts on forwarding table and delegates further
        processing to other methods
        """
        msg = json.loads(data)
        if msg['type'] == 'bpdu':
            self.process_bpdu(msg, pid)
        if msg['type'] == 'data':
            self.forward_message(msg, pid)

    def send_bpdu(self, send_now=False):
        """handles deciding whether it's time to send a BPDU and what BPDU to send
        """
        if datetime.now() - self.last_bpdu_time > BPDU_SEND_INTERVAL or send_now:
            # only send if prev send was over 500ms ago or on state change
            self.last_bpdu_time = datetime.now()
            bpdu = self.get_bpdu()
            for pid, port in self.ports.iteritems():
                port.send(bpdu.create(pid))

    def run(self):
        """constantly check ports for incomming messages
        """
        while True:
            self.send_bpdu()
            # Calls select with all the sockets; change the timeout value (1)
            ready, _, _ = select.select(self.ports.values(), [], [], 0.25)
            # Reads from each of the ready sockets
            for s in ready:
                data = s.recv(1500)
                self.process_message(data, s.fileno())

if __name__ == '__main__':
    """sets up and runs bridge
    """
    bid = sys.argv[1]
    lans = sys.argv[2:]
    bridge = Bridge(bid, lans)
    bridge.run()
