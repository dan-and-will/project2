#!/usr/bin/python -u
# The -u makes output unbuffered, so it will show up immediately
import json
import sys
import socket
import select
import threading

from forwarding_table import ForwardingTable

# pads the name with null bytes at the end
def pad(name):
    result = '\0' + name
    while len(result) < 108:
        result += '\0'
    return result

def compare_bpdus(bpdu1, bpdu2):
    if bpdu1['root'] < bpdu2['root']:
        return -1
    elif bpdu1['root'] == bpdu2['root'] and bpdu1['cost'] < bpdu2['cost']:
        return -1
    elif bpdu1['root'] == bpdu2['root'] and bpdu1['cost'] == bpdu2['cost'] and bpdu1['id'] < bpdu2['id']:
        return -1
    return 1

class Bridge:

    def __init__(self, bid, LANs):
        self.ftable = ForwardingTable()
        self.id = bid
        self.LANs = LAN
        self.ports = {}
        self.closed_ports = set()
        self.root_port = None
        self.bpdu = {'root': bid, 'cost': 0, 'id': bid}

        # creates sockets and connects to them
        for i in range(len(LAN)):
            s = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
            s.connect(pad(LAN[i]))
            self.ports[s.fileno()] = s

        print "Bridge " + bid + " starting up\n"

    def disable_port(self, pid):
        print 'Disabled port: {id}/{pid}'.format(id=self.id, pid=pid)
        self.closed_ports.add(pid)

    def enable_port(self, pid):
        self.closed_ports.discard(pid)

    def get_open_ports(self):
        return [self.ports[pid] for pid in self.ports if pid not in self.closed_ports]

    def use_bpdu(self, bpdu, pid):
        print 'New root: {id}/{root}'.format(id=self.id, root=bpdu['root'])
        print 'Root port: {id}/{port_id}'.format(id=self.id, port_id=pid)
        self.root_port = self.ports[pid]
        self.bpdu = bpdu
        self.bpdu['cost'] += 1

    def make_bpdu_packet(self):
        """ {"source":"02a1", "dest":"ffff", "type": "bpdu",
        "message":{"id":"92b4", "root":"02a1", "cost":3}}
        """

        bpdu_packet = {'source': self.id, 'dest': 'ffff', 'type': 'bpdu', 'message': self.bpdu}
        return json.dumps(bpdu_packet)

    def process_bpdu(self, msg, pid):
        if compare_bpdus(self.bpdu, msg) > 1:
            self.use_bpdu(msg, pid)

    def send_message(self, msg, ports=None):
        if ports is None:
            ports = self.ports.values()
        _, ready, _ = select.select({}, ports, [], 1)
        print 'Sending {msg} on ports: {ready}/{ports}'.format(msg=msg, ready=[s.fileno() for s in ready], ports=[p.fileno() for p in ports])
        for s in ready:
            s.send(msg)

    def forward_message(self, msg):
        dest_mac = msg['dest']
        port_id = self.ftable.read_row(dest_mac)
        if port_id < 0:
            ports = self.get_open_ports()
        else:
            ports = [self.ports[port_id]]
        msg = json.dumps(msg)
        for p in ports:
            self.send_message(msg, ports=ports)

    def process_message(self, data, pid):
        msg = json.loads(data)
        self.ftable.write_row(msg['source'], pid)
        if msg['type'] == 'bpdu':
            self.process_bpdu(msg['message'], pid)
        if msg['type'] == 'data':
            self.forward_message(msg)

    def send_bpdus(self):
        self.send_message(self.make_bpdu_packet())
        threading.Timer(0.5, self.send_bpdus).start()

    def run(self):
        self.send_bpdus()
        while True:
            # Calls select with all the sockets; change the timeout value (1)
            ready, _, _ = select.select(self.ports.values(), [], [], 1)

            # Reads from each of the ready sockets
            for s in ready:
                data = s.recv(1500)
                self.process_message(data, s.fileno())

if __name__ == '__main__':
    bid = sys.argv[1]
    LAN = sys.argv[2:]
    bridge = Bridge(bid, LAN)
    bridge.run()
